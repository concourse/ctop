// Code generated by counterfeiter. DO NOT EDIT.
package accountsfakes

import (
	"sync"

	"github.com/concourse/ft/accounts"
)

type FakeWorkerFactory struct {
	CreateWorkerStub        func(accounts.Command) (accounts.Worker, error)
	createWorkerMutex       sync.RWMutex
	createWorkerArgsForCall []struct {
		arg1 accounts.Command
	}
	createWorkerReturns struct {
		result1 accounts.Worker
		result2 error
	}
	createWorkerReturnsOnCall map[int]struct {
		result1 accounts.Worker
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeWorkerFactory) CreateWorker(arg1 accounts.Command) (accounts.Worker, error) {
	fake.createWorkerMutex.Lock()
	ret, specificReturn := fake.createWorkerReturnsOnCall[len(fake.createWorkerArgsForCall)]
	fake.createWorkerArgsForCall = append(fake.createWorkerArgsForCall, struct {
		arg1 accounts.Command
	}{arg1})
	fake.recordInvocation("CreateWorker", []interface{}{arg1})
	fake.createWorkerMutex.Unlock()
	if fake.CreateWorkerStub != nil {
		return fake.CreateWorkerStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createWorkerReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeWorkerFactory) CreateWorkerCallCount() int {
	fake.createWorkerMutex.RLock()
	defer fake.createWorkerMutex.RUnlock()
	return len(fake.createWorkerArgsForCall)
}

func (fake *FakeWorkerFactory) CreateWorkerCalls(stub func(accounts.Command) (accounts.Worker, error)) {
	fake.createWorkerMutex.Lock()
	defer fake.createWorkerMutex.Unlock()
	fake.CreateWorkerStub = stub
}

func (fake *FakeWorkerFactory) CreateWorkerArgsForCall(i int) accounts.Command {
	fake.createWorkerMutex.RLock()
	defer fake.createWorkerMutex.RUnlock()
	argsForCall := fake.createWorkerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeWorkerFactory) CreateWorkerReturns(result1 accounts.Worker, result2 error) {
	fake.createWorkerMutex.Lock()
	defer fake.createWorkerMutex.Unlock()
	fake.CreateWorkerStub = nil
	fake.createWorkerReturns = struct {
		result1 accounts.Worker
		result2 error
	}{result1, result2}
}

func (fake *FakeWorkerFactory) CreateWorkerReturnsOnCall(i int, result1 accounts.Worker, result2 error) {
	fake.createWorkerMutex.Lock()
	defer fake.createWorkerMutex.Unlock()
	fake.CreateWorkerStub = nil
	if fake.createWorkerReturnsOnCall == nil {
		fake.createWorkerReturnsOnCall = make(map[int]struct {
			result1 accounts.Worker
			result2 error
		})
	}
	fake.createWorkerReturnsOnCall[i] = struct {
		result1 accounts.Worker
		result2 error
	}{result1, result2}
}

func (fake *FakeWorkerFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createWorkerMutex.RLock()
	defer fake.createWorkerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeWorkerFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ accounts.WorkerFactory = new(FakeWorkerFactory)
