// Code generated by counterfeiter. DO NOT EDIT.
package accountsfakes

import (
	"net/url"
	"sync"

	"github.com/concourse/ft/accounts"
	"k8s.io/client-go/rest"
)

type FakeK8sConnection struct {
	RESTConfigStub        func() *rest.Config
	rESTConfigMutex       sync.RWMutex
	rESTConfigArgsForCall []struct {
	}
	rESTConfigReturns struct {
		result1 *rest.Config
	}
	rESTConfigReturnsOnCall map[int]struct {
		result1 *rest.Config
	}
	URLStub        func() (*url.URL, error)
	uRLMutex       sync.RWMutex
	uRLArgsForCall []struct {
	}
	uRLReturns struct {
		result1 *url.URL
		result2 error
	}
	uRLReturnsOnCall map[int]struct {
		result1 *url.URL
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeK8sConnection) RESTConfig() *rest.Config {
	fake.rESTConfigMutex.Lock()
	ret, specificReturn := fake.rESTConfigReturnsOnCall[len(fake.rESTConfigArgsForCall)]
	fake.rESTConfigArgsForCall = append(fake.rESTConfigArgsForCall, struct {
	}{})
	fake.recordInvocation("RESTConfig", []interface{}{})
	fake.rESTConfigMutex.Unlock()
	if fake.RESTConfigStub != nil {
		return fake.RESTConfigStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.rESTConfigReturns
	return fakeReturns.result1
}

func (fake *FakeK8sConnection) RESTConfigCallCount() int {
	fake.rESTConfigMutex.RLock()
	defer fake.rESTConfigMutex.RUnlock()
	return len(fake.rESTConfigArgsForCall)
}

func (fake *FakeK8sConnection) RESTConfigCalls(stub func() *rest.Config) {
	fake.rESTConfigMutex.Lock()
	defer fake.rESTConfigMutex.Unlock()
	fake.RESTConfigStub = stub
}

func (fake *FakeK8sConnection) RESTConfigReturns(result1 *rest.Config) {
	fake.rESTConfigMutex.Lock()
	defer fake.rESTConfigMutex.Unlock()
	fake.RESTConfigStub = nil
	fake.rESTConfigReturns = struct {
		result1 *rest.Config
	}{result1}
}

func (fake *FakeK8sConnection) RESTConfigReturnsOnCall(i int, result1 *rest.Config) {
	fake.rESTConfigMutex.Lock()
	defer fake.rESTConfigMutex.Unlock()
	fake.RESTConfigStub = nil
	if fake.rESTConfigReturnsOnCall == nil {
		fake.rESTConfigReturnsOnCall = make(map[int]struct {
			result1 *rest.Config
		})
	}
	fake.rESTConfigReturnsOnCall[i] = struct {
		result1 *rest.Config
	}{result1}
}

func (fake *FakeK8sConnection) URL() (*url.URL, error) {
	fake.uRLMutex.Lock()
	ret, specificReturn := fake.uRLReturnsOnCall[len(fake.uRLArgsForCall)]
	fake.uRLArgsForCall = append(fake.uRLArgsForCall, struct {
	}{})
	fake.recordInvocation("URL", []interface{}{})
	fake.uRLMutex.Unlock()
	if fake.URLStub != nil {
		return fake.URLStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.uRLReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeK8sConnection) URLCallCount() int {
	fake.uRLMutex.RLock()
	defer fake.uRLMutex.RUnlock()
	return len(fake.uRLArgsForCall)
}

func (fake *FakeK8sConnection) URLCalls(stub func() (*url.URL, error)) {
	fake.uRLMutex.Lock()
	defer fake.uRLMutex.Unlock()
	fake.URLStub = stub
}

func (fake *FakeK8sConnection) URLReturns(result1 *url.URL, result2 error) {
	fake.uRLMutex.Lock()
	defer fake.uRLMutex.Unlock()
	fake.URLStub = nil
	fake.uRLReturns = struct {
		result1 *url.URL
		result2 error
	}{result1, result2}
}

func (fake *FakeK8sConnection) URLReturnsOnCall(i int, result1 *url.URL, result2 error) {
	fake.uRLMutex.Lock()
	defer fake.uRLMutex.Unlock()
	fake.URLStub = nil
	if fake.uRLReturnsOnCall == nil {
		fake.uRLReturnsOnCall = make(map[int]struct {
			result1 *url.URL
			result2 error
		})
	}
	fake.uRLReturnsOnCall[i] = struct {
		result1 *url.URL
		result2 error
	}{result1, result2}
}

func (fake *FakeK8sConnection) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.rESTConfigMutex.RLock()
	defer fake.rESTConfigMutex.RUnlock()
	fake.uRLMutex.RLock()
	defer fake.uRLMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeK8sConnection) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ accounts.K8sConnection = new(FakeK8sConnection)
