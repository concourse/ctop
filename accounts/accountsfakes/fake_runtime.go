// Code generated by counterfeiter. DO NOT EDIT.
package accountsfakes

import (
	"io"
	"sync"

	"k8s.io/client-go/tools/remotecommand"
	"k8s.io/kubernetes/pkg/kubelet/server/streaming"
)

type FakeRuntime struct {
	AttachStub        func(string, io.Reader, io.WriteCloser, io.WriteCloser, bool, <-chan remotecommand.TerminalSize) error
	attachMutex       sync.RWMutex
	attachArgsForCall []struct {
		arg1 string
		arg2 io.Reader
		arg3 io.WriteCloser
		arg4 io.WriteCloser
		arg5 bool
		arg6 <-chan remotecommand.TerminalSize
	}
	attachReturns struct {
		result1 error
	}
	attachReturnsOnCall map[int]struct {
		result1 error
	}
	ExecStub        func(string, []string, io.Reader, io.WriteCloser, io.WriteCloser, bool, <-chan remotecommand.TerminalSize) error
	execMutex       sync.RWMutex
	execArgsForCall []struct {
		arg1 string
		arg2 []string
		arg3 io.Reader
		arg4 io.WriteCloser
		arg5 io.WriteCloser
		arg6 bool
		arg7 <-chan remotecommand.TerminalSize
	}
	execReturns struct {
		result1 error
	}
	execReturnsOnCall map[int]struct {
		result1 error
	}
	PortForwardStub        func(string, int32, io.ReadWriteCloser) error
	portForwardMutex       sync.RWMutex
	portForwardArgsForCall []struct {
		arg1 string
		arg2 int32
		arg3 io.ReadWriteCloser
	}
	portForwardReturns struct {
		result1 error
	}
	portForwardReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRuntime) Attach(arg1 string, arg2 io.Reader, arg3 io.WriteCloser, arg4 io.WriteCloser, arg5 bool, arg6 <-chan remotecommand.TerminalSize) error {
	fake.attachMutex.Lock()
	ret, specificReturn := fake.attachReturnsOnCall[len(fake.attachArgsForCall)]
	fake.attachArgsForCall = append(fake.attachArgsForCall, struct {
		arg1 string
		arg2 io.Reader
		arg3 io.WriteCloser
		arg4 io.WriteCloser
		arg5 bool
		arg6 <-chan remotecommand.TerminalSize
	}{arg1, arg2, arg3, arg4, arg5, arg6})
	fake.recordInvocation("Attach", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6})
	fake.attachMutex.Unlock()
	if fake.AttachStub != nil {
		return fake.AttachStub(arg1, arg2, arg3, arg4, arg5, arg6)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.attachReturns
	return fakeReturns.result1
}

func (fake *FakeRuntime) AttachCallCount() int {
	fake.attachMutex.RLock()
	defer fake.attachMutex.RUnlock()
	return len(fake.attachArgsForCall)
}

func (fake *FakeRuntime) AttachCalls(stub func(string, io.Reader, io.WriteCloser, io.WriteCloser, bool, <-chan remotecommand.TerminalSize) error) {
	fake.attachMutex.Lock()
	defer fake.attachMutex.Unlock()
	fake.AttachStub = stub
}

func (fake *FakeRuntime) AttachArgsForCall(i int) (string, io.Reader, io.WriteCloser, io.WriteCloser, bool, <-chan remotecommand.TerminalSize) {
	fake.attachMutex.RLock()
	defer fake.attachMutex.RUnlock()
	argsForCall := fake.attachArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6
}

func (fake *FakeRuntime) AttachReturns(result1 error) {
	fake.attachMutex.Lock()
	defer fake.attachMutex.Unlock()
	fake.AttachStub = nil
	fake.attachReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRuntime) AttachReturnsOnCall(i int, result1 error) {
	fake.attachMutex.Lock()
	defer fake.attachMutex.Unlock()
	fake.AttachStub = nil
	if fake.attachReturnsOnCall == nil {
		fake.attachReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.attachReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRuntime) Exec(arg1 string, arg2 []string, arg3 io.Reader, arg4 io.WriteCloser, arg5 io.WriteCloser, arg6 bool, arg7 <-chan remotecommand.TerminalSize) error {
	var arg2Copy []string
	if arg2 != nil {
		arg2Copy = make([]string, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.execMutex.Lock()
	ret, specificReturn := fake.execReturnsOnCall[len(fake.execArgsForCall)]
	fake.execArgsForCall = append(fake.execArgsForCall, struct {
		arg1 string
		arg2 []string
		arg3 io.Reader
		arg4 io.WriteCloser
		arg5 io.WriteCloser
		arg6 bool
		arg7 <-chan remotecommand.TerminalSize
	}{arg1, arg2Copy, arg3, arg4, arg5, arg6, arg7})
	fake.recordInvocation("Exec", []interface{}{arg1, arg2Copy, arg3, arg4, arg5, arg6, arg7})
	fake.execMutex.Unlock()
	if fake.ExecStub != nil {
		return fake.ExecStub(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.execReturns
	return fakeReturns.result1
}

func (fake *FakeRuntime) ExecCallCount() int {
	fake.execMutex.RLock()
	defer fake.execMutex.RUnlock()
	return len(fake.execArgsForCall)
}

func (fake *FakeRuntime) ExecCalls(stub func(string, []string, io.Reader, io.WriteCloser, io.WriteCloser, bool, <-chan remotecommand.TerminalSize) error) {
	fake.execMutex.Lock()
	defer fake.execMutex.Unlock()
	fake.ExecStub = stub
}

func (fake *FakeRuntime) ExecArgsForCall(i int) (string, []string, io.Reader, io.WriteCloser, io.WriteCloser, bool, <-chan remotecommand.TerminalSize) {
	fake.execMutex.RLock()
	defer fake.execMutex.RUnlock()
	argsForCall := fake.execArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6, argsForCall.arg7
}

func (fake *FakeRuntime) ExecReturns(result1 error) {
	fake.execMutex.Lock()
	defer fake.execMutex.Unlock()
	fake.ExecStub = nil
	fake.execReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRuntime) ExecReturnsOnCall(i int, result1 error) {
	fake.execMutex.Lock()
	defer fake.execMutex.Unlock()
	fake.ExecStub = nil
	if fake.execReturnsOnCall == nil {
		fake.execReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.execReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRuntime) PortForward(arg1 string, arg2 int32, arg3 io.ReadWriteCloser) error {
	fake.portForwardMutex.Lock()
	ret, specificReturn := fake.portForwardReturnsOnCall[len(fake.portForwardArgsForCall)]
	fake.portForwardArgsForCall = append(fake.portForwardArgsForCall, struct {
		arg1 string
		arg2 int32
		arg3 io.ReadWriteCloser
	}{arg1, arg2, arg3})
	fake.recordInvocation("PortForward", []interface{}{arg1, arg2, arg3})
	fake.portForwardMutex.Unlock()
	if fake.PortForwardStub != nil {
		return fake.PortForwardStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.portForwardReturns
	return fakeReturns.result1
}

func (fake *FakeRuntime) PortForwardCallCount() int {
	fake.portForwardMutex.RLock()
	defer fake.portForwardMutex.RUnlock()
	return len(fake.portForwardArgsForCall)
}

func (fake *FakeRuntime) PortForwardCalls(stub func(string, int32, io.ReadWriteCloser) error) {
	fake.portForwardMutex.Lock()
	defer fake.portForwardMutex.Unlock()
	fake.PortForwardStub = stub
}

func (fake *FakeRuntime) PortForwardArgsForCall(i int) (string, int32, io.ReadWriteCloser) {
	fake.portForwardMutex.RLock()
	defer fake.portForwardMutex.RUnlock()
	argsForCall := fake.portForwardArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRuntime) PortForwardReturns(result1 error) {
	fake.portForwardMutex.Lock()
	defer fake.portForwardMutex.Unlock()
	fake.PortForwardStub = nil
	fake.portForwardReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRuntime) PortForwardReturnsOnCall(i int, result1 error) {
	fake.portForwardMutex.Lock()
	defer fake.portForwardMutex.Unlock()
	fake.PortForwardStub = nil
	if fake.portForwardReturnsOnCall == nil {
		fake.portForwardReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.portForwardReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRuntime) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.attachMutex.RLock()
	defer fake.attachMutex.RUnlock()
	fake.execMutex.RLock()
	defer fake.execMutex.RUnlock()
	fake.portForwardMutex.RLock()
	defer fake.portForwardMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRuntime) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ streaming.Runtime = new(FakeRuntime)
